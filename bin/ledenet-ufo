#!/usr/bin/ruby

require 'optparse'
require 'json'

require 'ledenet_api'
require 'ipaddress'

options = {}

banner = <<-BANNER
  Usage: ledenet-ufo --list
     OR: ledenet-ufo [IP|HW ADDR] [OPTIONS]

BANNER

if ARGV.count > 0 && !ARGV.first.start_with?('-')
  arg = ARGV.shift

  if IPAddress.valid?(arg)
    options[:ip] = arg
  elsif /^([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2}$/i.match(arg)
    options[:hw_addr] = arg.gsub(':', '').upcase
  else
    raise "Invalid device speicifier \"#{arg}\". Must be ip or mac address."
  end
end

opts = OptionParser.new do |opts|
  opts.banner = banner

  opts.on("-r", "--red [VALUE]", Integer, "Set red to VALUE") do |v|
    options[:red] = v
  end

  opts.on("-g", "--green [VALUE]", Integer, "Set green to VALUE") do |v|
    options[:green] = v
  end

  opts.on("-b", "--blue [VALUE]", Integer, "Set blue to VALUE") do |v|
    options[:blue] = v
  end

  opts.on("-w", "--warm-white [VALUE]", Integer, "Set warm white to VALUE") do |v|
    options[:warm_white] = v
  end

  opts.on("-c", "--cold-white [VALUE]", Integer, "Set cold white to VALUE") do |v|
    options[:cold_white] = v
  end

  opts.on("--on", "Turn on the controller") do |v|
    options[:on?] = true
  end

  opts.on("--off", "Turn off the controller") do
    options[:on?] = false
  end

  opts.on("-l", "--list", "Prints a list of available devices and exits") do |v|
    options[:list] = true
  end

  opts.on("-s", "--status", "Prints status as JSON") do |v|
    options[:print_status?] = true
  end

  opts.on("-h", "--help", "Prints this help message") do
    options[:print_help?] = true
  end

  opts.on("--function-id [VALUE]", Integer, "Set function id to VALUE") do |v|
    options[:function] = v
  end

  opts.on("-f", "--function [VALUE]", "Set function to VALUE.") do |v|
    v.upcase!

    if !LEDENET::Functions.const_defined?(v)
      warn "Unknown function type: #{v}. Valid function types: \n\t" <<
           "#{LEDENET::Functions.all_functions.join("\n\t")}"
      exit 1
    end

    options[:function] = LEDENET::Functions.const_get(v)
  end

  opts.on("-p", "--speed [VALUE]", Integer, "Set function speed to VALUE") do |v|
    options[:speed] = v
  end
end

opts.parse!

if options[:print_help?] || options.empty?
  puts opts
  exit 0
end

if options[:list] && options.count > 1
  warn "--list is incompatible with other options!\n\n"
  warn opts
  exit 1
end

begin
  if options[:list]
    devices = LEDENET.discover_devices(expected_devices: 1000)

    row_format = "%16s %18s %20s\n"
    printf row_format, "IP ADDRESS", "HW ADDRESS", "Model #"

    devices.each do |device|
      formatted_hwaddr = (0...12).step(2)
        .map { |x| device.hw_addr[x, 2] }
        .join(':')
        .downcase

      printf row_format, device.ip, formatted_hwaddr, device.model
    end
  else
    ip = nil
    if options[:ip]
      ip = options[:ip]
    elsif options[:hw_addr]
      r = LEDENET.discover_devices(expected_hw_addrs: [options[:hw_addr]])
      r.select! { |x| x.hw_addr == options[:hw_addr] }

      if r.empty?
        raise "Couldn't find device with mac addr: #{options[:hw_addr]}"
      end
      ip = r.first.ip
    else
      ip = LEDENET.discover_devices.first.ip
    end

    api = LEDENET::Api.new(ip)

    color_params = options.select do |k,_|
      %w{red green blue warm_white cold_white}.include?(k.to_s)
    end

    if !options[:on?].nil?
      api.set_power(options[:on?])
    end

    if color_params.any?
      api.update_color_data(color_params)
    end

    if options[:function]
      api.update_function(options[:function])
    end

    if options[:speed]
      api.update_function_speed(options[:speed])
    end

    if options[:print_status?]
      puts api.status.to_json
    end
  end
rescue Exception => e
  puts "Error: #{e}"
  puts e.backtrace.join("\n")
end
